// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssd2.proto

#ifndef PROTOBUF_ssd2_2eproto__INCLUDED
#define PROTOBUF_ssd2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ssd2_2eproto();
void protobuf_AssignDesc_ssd2_2eproto();
void protobuf_ShutdownFile_ssd2_2eproto();

class vehicle;
class position;
class firstSegment;

// ===================================================================

class vehicle : public ::google::protobuf::Message {
 public:
  vehicle();
  virtual ~vehicle();

  vehicle(const vehicle& from);

  inline vehicle& operator=(const vehicle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const vehicle& default_instance();

  void Swap(vehicle* other);

  // implements Message ----------------------------------------------

  vehicle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const vehicle& from);
  void MergeFrom(const vehicle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .position pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::position& pos() const;
  inline ::position* mutable_pos();
  inline ::position* release_pos();
  inline void set_allocated_pos(::position* pos);

  // required float dist = 3;
  inline bool has_dist() const;
  inline void clear_dist();
  static const int kDistFieldNumber = 3;
  inline float dist() const;
  inline void set_dist(float value);

  // required float angle = 4;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 4;
  inline float angle() const;
  inline void set_angle(float value);

  // required float length = 5;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 5;
  inline float length() const;
  inline void set_length(float value);

  // required .firstSegment fs = 6;
  inline bool has_fs() const;
  inline void clear_fs();
  static const int kFsFieldNumber = 6;
  inline const ::firstSegment& fs() const;
  inline ::firstSegment* mutable_fs();
  inline ::firstSegment* release_fs();
  inline void set_allocated_fs(::firstSegment* fs);

  // @@protoc_insertion_point(class_scope:vehicle)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_dist();
  inline void clear_has_dist();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_fs();
  inline void clear_has_fs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::position* pos_;
  float dist_;
  float angle_;
  ::firstSegment* fs_;
  float length_;
  friend void  protobuf_AddDesc_ssd2_2eproto();
  friend void protobuf_AssignDesc_ssd2_2eproto();
  friend void protobuf_ShutdownFile_ssd2_2eproto();

  void InitAsDefaultInstance();
  static vehicle* default_instance_;
};
// -------------------------------------------------------------------

class position : public ::google::protobuf::Message {
 public:
  position();
  virtual ~position();

  position(const position& from);

  inline position& operator=(const position& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const position& default_instance();

  void Swap(position* other);

  // implements Message ----------------------------------------------

  position* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const position& from);
  void MergeFrom(const position& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:position)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_ssd2_2eproto();
  friend void protobuf_AssignDesc_ssd2_2eproto();
  friend void protobuf_ShutdownFile_ssd2_2eproto();

  void InitAsDefaultInstance();
  static position* default_instance_;
};
// -------------------------------------------------------------------

class firstSegment : public ::google::protobuf::Message {
 public:
  firstSegment();
  virtual ~firstSegment();

  firstSegment(const firstSegment& from);

  inline firstSegment& operator=(const firstSegment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const firstSegment& default_instance();

  void Swap(firstSegment* other);

  // implements Message ----------------------------------------------

  firstSegment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const firstSegment& from);
  void MergeFrom(const firstSegment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float lx = 1;
  inline bool has_lx() const;
  inline void clear_lx();
  static const int kLxFieldNumber = 1;
  inline float lx() const;
  inline void set_lx(float value);

  // required float ly = 2;
  inline bool has_ly() const;
  inline void clear_ly();
  static const int kLyFieldNumber = 2;
  inline float ly() const;
  inline void set_ly(float value);

  // required float rx = 3;
  inline bool has_rx() const;
  inline void clear_rx();
  static const int kRxFieldNumber = 3;
  inline float rx() const;
  inline void set_rx(float value);

  // required float ry = 4;
  inline bool has_ry() const;
  inline void clear_ry();
  static const int kRyFieldNumber = 4;
  inline float ry() const;
  inline void set_ry(float value);

  // @@protoc_insertion_point(class_scope:firstSegment)
 private:
  inline void set_has_lx();
  inline void clear_has_lx();
  inline void set_has_ly();
  inline void clear_has_ly();
  inline void set_has_rx();
  inline void clear_has_rx();
  inline void set_has_ry();
  inline void clear_has_ry();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float lx_;
  float ly_;
  float rx_;
  float ry_;
  friend void  protobuf_AddDesc_ssd2_2eproto();
  friend void protobuf_AssignDesc_ssd2_2eproto();
  friend void protobuf_ShutdownFile_ssd2_2eproto();

  void InitAsDefaultInstance();
  static firstSegment* default_instance_;
};
// ===================================================================


// ===================================================================

// vehicle

// required string name = 1;
inline bool vehicle::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void vehicle::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void vehicle::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void vehicle::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& vehicle::name() const {
  // @@protoc_insertion_point(field_get:vehicle.name)
  return *name_;
}
inline void vehicle::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:vehicle.name)
}
inline void vehicle::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:vehicle.name)
}
inline void vehicle::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vehicle.name)
}
inline ::std::string* vehicle::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:vehicle.name)
  return name_;
}
inline ::std::string* vehicle::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void vehicle::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:vehicle.name)
}

// required .position pos = 2;
inline bool vehicle::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void vehicle::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void vehicle::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void vehicle::clear_pos() {
  if (pos_ != NULL) pos_->::position::Clear();
  clear_has_pos();
}
inline const ::position& vehicle::pos() const {
  // @@protoc_insertion_point(field_get:vehicle.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::position* vehicle::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::position;
  // @@protoc_insertion_point(field_mutable:vehicle.pos)
  return pos_;
}
inline ::position* vehicle::release_pos() {
  clear_has_pos();
  ::position* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void vehicle::set_allocated_pos(::position* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:vehicle.pos)
}

// required float dist = 3;
inline bool vehicle::has_dist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void vehicle::set_has_dist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void vehicle::clear_has_dist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void vehicle::clear_dist() {
  dist_ = 0;
  clear_has_dist();
}
inline float vehicle::dist() const {
  // @@protoc_insertion_point(field_get:vehicle.dist)
  return dist_;
}
inline void vehicle::set_dist(float value) {
  set_has_dist();
  dist_ = value;
  // @@protoc_insertion_point(field_set:vehicle.dist)
}

// required float angle = 4;
inline bool vehicle::has_angle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void vehicle::set_has_angle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void vehicle::clear_has_angle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void vehicle::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline float vehicle::angle() const {
  // @@protoc_insertion_point(field_get:vehicle.angle)
  return angle_;
}
inline void vehicle::set_angle(float value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:vehicle.angle)
}

// required float length = 5;
inline bool vehicle::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void vehicle::set_has_length() {
  _has_bits_[0] |= 0x00000010u;
}
inline void vehicle::clear_has_length() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void vehicle::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline float vehicle::length() const {
  // @@protoc_insertion_point(field_get:vehicle.length)
  return length_;
}
inline void vehicle::set_length(float value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:vehicle.length)
}

// required .firstSegment fs = 6;
inline bool vehicle::has_fs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void vehicle::set_has_fs() {
  _has_bits_[0] |= 0x00000020u;
}
inline void vehicle::clear_has_fs() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void vehicle::clear_fs() {
  if (fs_ != NULL) fs_->::firstSegment::Clear();
  clear_has_fs();
}
inline const ::firstSegment& vehicle::fs() const {
  // @@protoc_insertion_point(field_get:vehicle.fs)
  return fs_ != NULL ? *fs_ : *default_instance_->fs_;
}
inline ::firstSegment* vehicle::mutable_fs() {
  set_has_fs();
  if (fs_ == NULL) fs_ = new ::firstSegment;
  // @@protoc_insertion_point(field_mutable:vehicle.fs)
  return fs_;
}
inline ::firstSegment* vehicle::release_fs() {
  clear_has_fs();
  ::firstSegment* temp = fs_;
  fs_ = NULL;
  return temp;
}
inline void vehicle::set_allocated_fs(::firstSegment* fs) {
  delete fs_;
  fs_ = fs;
  if (fs) {
    set_has_fs();
  } else {
    clear_has_fs();
  }
  // @@protoc_insertion_point(field_set_allocated:vehicle.fs)
}

// -------------------------------------------------------------------

// position

// required float x = 1;
inline bool position::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void position::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void position::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void position::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float position::x() const {
  // @@protoc_insertion_point(field_get:position.x)
  return x_;
}
inline void position::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:position.x)
}

// required float y = 2;
inline bool position::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void position::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void position::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void position::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float position::y() const {
  // @@protoc_insertion_point(field_get:position.y)
  return y_;
}
inline void position::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:position.y)
}

// required float z = 3;
inline bool position::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void position::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void position::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void position::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float position::z() const {
  // @@protoc_insertion_point(field_get:position.z)
  return z_;
}
inline void position::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:position.z)
}

// -------------------------------------------------------------------

// firstSegment

// required float lx = 1;
inline bool firstSegment::has_lx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void firstSegment::set_has_lx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void firstSegment::clear_has_lx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void firstSegment::clear_lx() {
  lx_ = 0;
  clear_has_lx();
}
inline float firstSegment::lx() const {
  // @@protoc_insertion_point(field_get:firstSegment.lx)
  return lx_;
}
inline void firstSegment::set_lx(float value) {
  set_has_lx();
  lx_ = value;
  // @@protoc_insertion_point(field_set:firstSegment.lx)
}

// required float ly = 2;
inline bool firstSegment::has_ly() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void firstSegment::set_has_ly() {
  _has_bits_[0] |= 0x00000002u;
}
inline void firstSegment::clear_has_ly() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void firstSegment::clear_ly() {
  ly_ = 0;
  clear_has_ly();
}
inline float firstSegment::ly() const {
  // @@protoc_insertion_point(field_get:firstSegment.ly)
  return ly_;
}
inline void firstSegment::set_ly(float value) {
  set_has_ly();
  ly_ = value;
  // @@protoc_insertion_point(field_set:firstSegment.ly)
}

// required float rx = 3;
inline bool firstSegment::has_rx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void firstSegment::set_has_rx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void firstSegment::clear_has_rx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void firstSegment::clear_rx() {
  rx_ = 0;
  clear_has_rx();
}
inline float firstSegment::rx() const {
  // @@protoc_insertion_point(field_get:firstSegment.rx)
  return rx_;
}
inline void firstSegment::set_rx(float value) {
  set_has_rx();
  rx_ = value;
  // @@protoc_insertion_point(field_set:firstSegment.rx)
}

// required float ry = 4;
inline bool firstSegment::has_ry() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void firstSegment::set_has_ry() {
  _has_bits_[0] |= 0x00000008u;
}
inline void firstSegment::clear_has_ry() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void firstSegment::clear_ry() {
  ry_ = 0;
  clear_has_ry();
}
inline float firstSegment::ry() const {
  // @@protoc_insertion_point(field_get:firstSegment.ry)
  return ry_;
}
inline void firstSegment::set_ry(float value) {
  set_has_ry();
  ry_ = value;
  // @@protoc_insertion_point(field_set:firstSegment.ry)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ssd2_2eproto__INCLUDED
